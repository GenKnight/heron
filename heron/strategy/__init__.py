# encoding: UTF-8
"""
交易策略组件，负责交易策略的实现、以及生命周期管理

一个交易策略由若干个逻辑规则实现，并且内建标的物选择、开仓、平仓等规则。

整个生命周期由若干事件组成，用户可通过实现相应节点的钩子，达到自定义策略的目的。

自带回测功能，通过调用回测引擎中的回测方法，实现特定历史阶段的回测

Strategy is an base class providing an interface for
all subsequent (inherited) strategy handling objects.

The goal of a (derived) Strategy object is to generate Signal
objects for particular symbols based on the inputs of Bars
(OLHCVI) generated by a Data.

This is designed to work both with historic and live data as
the Strategy object is agnostic to the data source,
since it obtains the bar tuples from a queue object.

"""


from heron import BaseComponent, Event, handler
from heron.quant.backtest import backtest as bt


class BaseStrategy(BaseComponent):

    @handler("tick")
    def on_tick(self):
        pass

    @handler("bar")
    def on_bar(self):
        pass

    def backtest(self, start, end):
        """
        调用回测引擎，对自己进行回测
        """
        bt(self, start, end)
